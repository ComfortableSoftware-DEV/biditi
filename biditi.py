#!/usr/bin/python
# v01.01.0001


# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# import globally
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

from datetime import datetime as DT
from os import path as PATH
import pickle as PD
import PySimpleGUI as SG

# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# setting constants
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

MAINDOWNCOLOR = "#880000"
MAINDOWNTEXTCOLOR = "#FF0000"
MAINUPCOLOR = "#008800"
MAINUPTEXTCOLOR = "#00FF00"
GRAY8 = "#888888"
GRAYC = "#CCCCCC"
PURP440022 = "#440022"
PURP660044 = "#660044"
YELLOW666600 = "#666600"
GREEN2 = "#448811"
BLACK = "#000000"
ORANGE = "#FF7F00"
YELLOW2 = "#444422"
TEAL1 = "#00FF7F"

AIR = "AIR"
DYNAVAP = "DYNAVAP"
FIREFLY = "FIREFLY"
Q = "Q"
QOMO = "QOMO"
VARIOUS = "VARIOUS"

TASKLIST = [
	AIR,
	DYNAVAP,
	FIREFLY,
	Q,
	QOMO,
	VARIOUS,
]

ADJBTNDOWNCOLOR = MAINDOWNCOLOR
ADJBTNDOWNTEXTCOLOR = MAINDOWNTEXTCOLOR
ADJBTNUPCOLOR = MAINUPCOLOR
ADJBTNUPTEXTCOLOR = MAINUPTEXTCOLOR
ADJTIMEDOWNBKGNDCOLOR = MAINDOWNCOLOR
ADJTIMETXTCOLOR = GRAYC
ADJTIMEUPBKGNDCOLOR = MAINUPCOLOR
BTNDOWNCOLOR = MAINDOWNCOLOR
BTNDOWNTEXTCOLOR = MAINDOWNTEXTCOLOR
BTNQUITCOLOR = PURP440022
BTNQUITTEXTCOLOR = YELLOW666600
BTNTASKDOWNCOLOR = MAINDOWNCOLOR
BTNTASKDOWNTEXTCOLOR = MAINDOWNTEXTCOLOR
BTNTASKUPCOLOR = MAINUPCOLOR
BTNTASKUPTEXTCOLOR = MAINUPTEXTCOLOR
BTNUPCOLOR = MAINUPCOLOR
BTNUPTEXTCOLOR = MAINUPTEXTCOLOR
BTNZEROCOLOR = PURP440022
BTNZEROTEXTCOLOR = YELLOW666600
LASTFILENAME = "biditi.last"
MODE_NORMAL = "MODE_NORMAL"
MODE_RESTART = "MODE_RESTART"
MODE_START = "MODE_START"
MYFACTOR = 10
MYSCALE = 100
NOT = "NOT"
SPACECOLOR = GRAY8
SPINBKGNDCOLOR = TEAL1
SPINSIZE = (10, 1)
SPINTEXTCOLOR = ORANGE
STOPMODE_BUTTON = "STOPMODE_BUTTON"
STOPMODE_CYCLE = "STOPMODE_CYCLE"
TASKCOUNTERCOLOR = GREEN2
TASKCOUNTSZ = (3, 1)
TIMERDOWNBKGNDCOLOR = MAINDOWNCOLOR
TIMERDOWNTEXTCOLOR = MAINDOWNTEXTCOLOR
TIMEROFFBKGNDCOLOR = BLACK
TIMEROFFTXTCOLOR = YELLOW2
TIMERUPBKGNDCOLOR = MAINUPCOLOR
TIMERUPTEXTCOLOR = MAINUPTEXTCOLOR


# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# up and down buttons in various sizes, and base 64 encoded for ease of use
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
DN8 = b'iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAACvXpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZZtbtswDIb/6xQ7gvglSseR9QHsBjv+XtlO0rVF2q4FtgKRECuRKfIVH8pOGL9+zvADjXLmoOY5lZQimhYtXPElx1sb53jMUdT9eml0Xim8eoMxCkY5Jl3Pu3LOX+zTdYSjV26QPVsg1zD8NLDXc54j/6Gol2uM23bOz5w9zzmO3VVNSEM6NnWECBc3MNyQJdmXJXTHx/Dd917Qc6yxkcYeW9zQGxVikjhJqQeqNGlQx9ioQaPyYMfI3Fj2uSzOhZtEIdHVabJLkS5ZWBoPEdEgfNVCe9yyx2uUEbkTTJngjLDkbg9vGbynz9kickSE3dOZK+hiXhxopVHWFWYAQvPkZnuCL/3awhOwAoK2pzljgzVuh4vN6FZbsheAwM4wHvVF3hc13qtEEdsghgQIYiIxShSd2YlUOANQhXIW5Q0EyIw7RLKKJLDBEVmxscZpt2XjYx5HBXxMkjjYFKmApWqoH9eMGqompmaWzC1bsRqSJE2WUvK0zlx1cXXz5O7Zi9csWbPllD3nXHItXARH0koqXnIppVbErBqqVayusKh140023WxLm295K1ttKJ+mzVpq3nIrrXbu0rVbT9177qXXQQOlFIYOG2n4yKOMOlFrU6ZOm2n6zLPMeqV2Un3RP0CNTmq8k1p2fqWGWfflaHdB6zljixmIsRKI+yKAgubFLGZS5UVuMYuFcSqMIdIWm06xBkpAqIPYJl3Z3ci9m1tArt/ixu8hFxa6LyDHYcgzbq9Q6+tJ2HZixylcOY2C0wfwuXKus4Qi05ErXr/jJ8bwWQcPR//MkbR21gPqfOJ1fxrgjcNnnbxVJp9T9ERA+EPBC8OHom+o6AMKw98qeC7gg44eir6hojsK77/X7ij44iPyUPQfKBL8Fyr4Y/kb/7SXn9obAksAAAGEaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1NFkUoHO0hxyFCdLIiKCC5ahSJUCLVCqw4ml35Bk4YkxcVRcC04+LFYdXBx1tXBVRAEP0CcHJ0UXaTE/yWFFjEeHPfj3b3H3TtAaFSYZnWNAZpum+lkQszmVsWeV4QQhoAZRGVmGXOSlILv+LpHgK93cZ7lf+7P0a/mLQYEROJZZpg28Qbx1KZtcN4njrCSrBKfE4+adEHiR64rHr9xLros8MyImUnPE0eIxWIHKx3MSqZGPEkcUzWd8oWsxyrnLc5apcZa9+QvDOX1lWWu0xxCEotYggQRCmooowIbcVp1UiykaT/h44+6folcCrnKYORYQBUaZNcP/ge/u7UKE+NeUigBdL84zscw0LMLNOuO833sOM0TIPgMXOltf7UBTH+SXm9rsSMgvA1cXLc1ZQ+43AEGnwzZlF0pSFMoFID3M/qmHDBwC/Steb219nH6AGSoq9QNcHAIjBQpe93n3b2dvf17ptXfD4cBcq8vg+7BAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5AwPAwMfePHuDAAAACh0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUCBieSBHYWVsaWNHcmltZXfSq44AAAAwSURBVBjTjcwxDgAgDMNAh///OV1YqKDBq6WTwQwtQgJ4KQL9CTdF+0XhyOAuRaEAR6QKBigloSoAAAAASUVORK5CYII='
UP08 = b'iVBORw0KGgoAAAANSUhEUgAAAAgAAAAICAYAAADED76LAAADBXpUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja7ZZdkuMqDIXftYq7BCQhBMvB/FTdHdzlz/FPp3vSmcRJ+mEeLlSMCwt0rO/gCo3//p30DxrnIhTNcyopBbRYYpGKmxw+2zjGfY5D3K4fjY8r080HglEx6j7p8Xiqx/xHfLqM2OjGA7arBXpJI18Tez3mJchvioZecny+zvGbs+c5x/52NSaUIe0vtaegj20QuKBKui1L6I6f4d63XtBzqKFxDD20sKA3LiysYXLkTlx58uCOsXGDxihDHKNIE93msroUaRqUNa6dp7gW7ZpVtMlQ1UgqFy285S1bvsYZmTsjVBibMZbc7fQo4EyfswXUiBlvz0etoEtk5cBrGXW9IgxAeB7cbCvwR780+gJWQdC2Mme8YA3LvsVi/Okt3QygiDOMu7/Y+0pNNpdE5DaIYQWCkFiNEwcXceaokgGoQrlolAUE2Ew6REpUTWCT4SPkxhrnLVZM9nkcFfAxTepgU7QCVowG/3jM8FA1tWhmydyyFauUNMVkKSVP65mrrh7dPLl79uI1a47Zcsqecy65FimKI2klFS+5lFIrctZI1SpWV0TUusiiS1xsSYsveSlLbbBPi81aat5yK6126dpjt56699xLr4MHrEQjDhtp+MijjDrhtakzTptp+syzzHqhdlD91p+gxgc12UitcX6hhln3daNtC16/M7YyAzGJDOK+EoChZWUWMscoK7mVWSiCU2ECkbay6RwqcQLCOFhs8oXdJ7nT3Ai1fsRNzpCjFd0PkBMaesXtBrW+fgnbRmw/hWtNg+L04fnIVXJFsWW/eThO6N5uZ+thtnwVQF8iS017ZJc2u7ezKbaRzgY+0kS/Rb6hic6Lv6+JriJf1kTPFPSeJvoW+aImetc/N3z0x51OaaT3PX3DR+9oop84Zzd89Lom+pmzf8NHr2qid/3zhI/OaaQ7h+ApTfSKllua6O7BfEITvabluyZ68LE4rYle1XKtib4Z7En//ICP/t/ob94I/48KDPcLCh2pB5Pw+uYAAAGEaUNDUElDQyBwcm9maWxlAAB4nH2RPUjDQBzFX1NFkUoHO0hxyFCdLIiKCC5ahSJUCLVCqw4ml35Bk4YkxcVRcC04+LFYdXBx1tXBVRAEP0CcHJ0UXaTE/yWFFjEeHPfj3b3H3TtAaFSYZnWNAZpum+lkQszmVsWeV4QQhoAZRGVmGXOSlILv+LpHgK93cZ7lf+7P0a/mLQYEROJZZpg28Qbx1KZtcN4njrCSrBKfE4+adEHiR64rHr9xLros8MyImUnPE0eIxWIHKx3MSqZGPEkcUzWd8oWsxyrnLc5apcZa9+QvDOX1lWWu0xxCEotYggQRCmooowIbcVp1UiykaT/h44+6folcCrnKYORYQBUaZNcP/ge/u7UKE+NeUigBdL84zscw0LMLNOuO833sOM0TIPgMXOltf7UBTH+SXm9rsSMgvA1cXLc1ZQ+43AEGnwzZlF0pSFMoFID3M/qmHDBwC/Steb219nH6AGSoq9QNcHAIjBQpe93n3b2dvf17ptXfD4cBcq8vg+7BAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5AwPAwUCTa0lUwAAACh0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUCBieSBHYWVsaWNHcmltZXfSq44AAAAoSURBVBjTY2BABv+hEAkwMRAAjCi6UWUYSTABXTeSKUSYgEs3sb4AAMxkCgbNZQSOAAAAAElFTkSuQmCC'

DN16 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAC13pUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja1ZZtchshDIb/c4oeAUkIwXFYPmZ6gx6/L7vrtet6YqdOUgeNF4cF6UWPIHb918/hfqBRyskFtRRzjB4t5JC54Evy59b3fhsjH9bnqdH+JHfzBaMX9LINWtjfyj5+mh+PHo5uvCC9WiBHGL4MbGUfZ89/KOr5iHHezv4Zo6Ux+ra7EiLSELdNbSHcyQ0mLsiSrMsizPBRfLfVMiz54isF33z1C6xSJibxgwI1R4UGdWroK1VoDNzZ0DNXlnUsiXHmKl5IwjQabJKlSRKWyl1EghM+tNAaN6/xKiVEboSpTHBGWPKmuXsTHrExqkeOiLB72nMFXcyTA800ynxiGoDQ2LnpmuCTHc1dgBUQ1DXNCRssftlcLErn2pK1AATzFP1WX2RtUuO1SgJiK8SQAIGPJEqRvDEbURBOAFSgnCXwAgKkyg0iOYhEsEmoI8TGGqN1Litv4zgq4KMSxcAmSwGsEBT1YyGhhoqKBlWNapo0a3FRYogaY7Q4z1wxsWBq0cySZStJUkiaYrKUcDZL5iw4kppjtpxyzqUgZgmuaMHqghmlLLzIEhZd4mJLWvJSKsqnhqo1Vqup5loaN2mhaYvNWmq5lU4dpeR66Npjt5567mWg1oaMMHTEYSONPMpBbaf6l72DGu3UeCU159lBDaNm09HqguY9o5MZiHEgELdJAAXNk5lPFAJPcpOZz4xToQyROtk08sVRBMLQiXXQwe5M7mFuDrm+x40fIecmug8gx67LFbcb1Nq8CetKbDuFM6decPoAPhVOZWSXZRhyxfNv/0TvnnXwnxxJrXsuwHj4jluW99ycUvNFiq6VHOMvp+iGsk+uo3tKXlfRhTJ3jfFjFL1XyesqOhzdKPl/U/SEkldX9Mb18OjF555V8l0UvVfZBST3rJLvpuieshsF/FX/jj5LkeC3UsYPz98iX6IbCeIDbAAAAYRpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU6WiFQcLijgErE4WREUctQpFqBBqhVYdTC79EJo0JCkujoJrwcGPxaqDi7OuDq6CIPgB4uTopOgiJf4vKbSI8eC4H+/uPe7eAUKtxDSrbQzQdNtMJeJiJrsihl4RRhf6MISQzCxjVpKS8B1f9wjw9S7Gs/zP/Tm61ZzFgIBIPMMM0yZeJ57atA3O+8QRVpRV4nPiUZMuSPzIdcXjN84FlwWeGTHTqTniCLFYaGGlhVnR1IgniaOqplO+kPFY5bzFWStVWOOe/IXhnL68xHWag0hgAYuQIEJBBRsowUaMVp0UCynaj/v4B1y/RC6FXBtg5JhHGRpk1w/+B7+7tfIT415SOA60vzjOxzAQ2gXqVcf5Pnac+gkQfAau9Ka/XAOmP0mvNrXoEdCzDVxcNzVlD7jcAfqfDNmUXSlIU8jngfcz+qYs0HsLdK56vTX2cfoApKmr5A1wcAiMFCh7zefdHa29/Xum0d8PRltyldQcsX8AAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfkDAsXMQ8cezbiAAAAKHRFWHRDb21tZW50AENyZWF0ZWQgd2l0aCBHSU1QIGJ5IEdhZWxpY0dyaW1ld9KrjgAAAE5JREFUOMu10TsOgEAMA9EZ7n/n0GyB0LK/BNe29CQbECRykYwApwrBGsGJwratE+wofOxqBSsKX5t6wUhhp/+PoKfwo5sWDBMQs1fSght0IRISVNQe5AAAAABJRU5ErkJggg=='
UP16 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADB3pUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHjazZVdstsgDIXfWUWXgCSEYDmYn5nuoMvvAfvmtrdJE6d+KEyMBwQc9B0c1398H+4bCmXyLqilmGP0KCGHzAUvyX+WfrR7H/mwnh+Fjie5uwOMVtDK3mnhGJWj/yM+3losdGeA9MsEuW3Dv25s5ehnz78pGnrb4/M4x2+Mlsbo++lKiEhD3A+1b+E+lkHghizJmhZRDT/Fu62aUZMvvlLwzVe/oVYkmUn8oEDNUaFBnRraShUaA3c2tMyVZfUlMc5cxQtJmJUGm2RpkoSlcheR4IRvWmjtm9d+lRJ2boRQJixGmPLX6p4FvFLHqB45IsLp6cgVdDFPDjTTKPOJMAChcXDTleCPeivuF7ACgrrSnHDA4rd9iU3p01uyDCCIU7S7v8japMbLJQF7K8SQAIGPJEqRvDEbURBOAFSgnCXwBgKkyg0iOYhEsEnwEfbGHKMVy8p7P64K+KhEMbDJUgArBIV/LCR4qKhoUNWopkmzFhclhqgxRovzzhUTC6YWzSxZtpIkhaQpJksp5VQyZ8GV1Byz5ZRzLgV7luCKFswuiChl4022sOkWN9vSlrdSYZ8aqtZYraaaa2ncpIWmLTZrqeVWOnVYyfXQtcduPfXcy4DXhowwdMRhI408yo3aQfWPeoIaHdR4kZpxdqOGXrO50FqC5ndGJzMQ40AgbpMADM2TmU8UAk9yk5nPjFuhDJE62TTyxVEEwtCJddCN3Se5l7k55PoZN36FnJvoLiDHrssXbneotfklrIvYfgtnTr3g9mG8p8KpINm8v7zcDuhfr6M2P2o6BtxctcR9pHEdzerZpVfrzk54pMmtkQs0uSvyMwPcl8i3tblrmOGu/RH5piZ3RX4OHz2ceUqbu4bZ4aMrNLkr8nPHR+9rc9cwu+OjdzW5K/LzxEfntLlrmD3x0RlN7or8nPDRc23uiflf1uTe1fJVk3to+hP5edNHDxd6aP5Tmty/a/F/+YM8mZ8LfPT/LjTg7AxX/gQaxLaLAaEVugAAAYRpQ0NQSUNDIHByb2ZpbGUAAHicfZE9SMNAHMVfU6WiFQcLijgErE4WREUctQpFqBBqhVYdTC79EJo0JCkujoJrwcGPxaqDi7OuDq6CIPgB4uTopOgiJf4vKbSI8eC4H+/uPe7eAUKtxDSrbQzQdNtMJeJiJrsihl4RRhf6MISQzCxjVpKS8B1f9wjw9S7Gs/zP/Tm61ZzFgIBIPMMM0yZeJ57atA3O+8QRVpRV4nPiUZMuSPzIdcXjN84FlwWeGTHTqTniCLFYaGGlhVnR1IgniaOqplO+kPFY5bzFWStVWOOe/IXhnL68xHWag0hgAYuQIEJBBRsowUaMVp0UCynaj/v4B1y/RC6FXBtg5JhHGRpk1w/+B7+7tfIT415SOA60vzjOxzAQ2gXqVcf5Pnac+gkQfAau9Ka/XAOmP0mvNrXoEdCzDVxcNzVlD7jcAfqfDNmUXSlIU8jngfcz+qYs0HsLdK56vTX2cfoApKmr5A1wcAiMFCh7zefdHa29/Xum0d8PRltyldQcsX8AAAAJcEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfkDAsXMR8BzCaGAAAAKHRFWHRDb21tZW50AENyZWF0ZWQgd2l0aCBHSU1QIGJ5IEdhZWxpY0dyaW1ld9KrjgAAAElJREFUOMtjYMAH/kMhHsDEQCFgxGs7qkpGOroAl7+xuIIGLiAQ6uiuoLILCNmOxRVUdAGxtqO5gkouINV2JFdQwQXk2k6tWAAAfOMSEjTpcNIAAAAASUVORK5CYII='

DN32 = b'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'
UP32 = b'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'

DN64 = b'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'
UP64 = b'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'

DN96 = b'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'
UP96 = b'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'

DN128 = b'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'
UP128 = b''

PCADJTIMEBTNFONTSZ = 6
PCADJTIMEDOWNIMAGE = DN32
PCADJTIMEFONTSZ = 18
PCADJTIMEUPIMAGE = UP32
PCBTNFONTSZ = 10
PCCOUNTERFONTSZ = 30
PCDOWNIMAGE = DN64
PCFONT = "Source Code Pro"
PCLABELFONTSZ = 12
PCSETTIMERFONTSZ = 20
PCSPACEFONTSZ = 10
PCSPINFONTSZ = 16
PCTIMERFONTSZ = 130
PCUPDOWNTIMEFONTSZ = 50
PCUPIMAGE = UP64

CWD = PATH.abspath(".")
if CWD.find("_android") > -1:
	ADJTIMEBTNFONTSZ = 6
	ADJTIMEDOWNIMAGE = DN64
	ADJTIMEFONTSZ = 10
	ADJTIMEUPIMAGE = UP64
	BTNFONTSZ = 12
	CONFIGDIRECTORY = ""
	COUNTERFONTSZ = 20
	DOWNIMAGE = DN128
	FONT = "Source Code Pro"
	LABELFONTSZ = 12
	SETTIMERFONTSZ = 20
	SG.ChangeLookAndFeel("DarkPurple6")
	SPACEFONTSZ = 10
	SPINFONTSZ = 9
	TIMERFONTSZ = 85
	UPDOWNTIMEFONTSZ = 30
	UPIMAGE = UP128
elif CWD.find("_DEV") > -1:
	ADJTIMEBTNFONTSZ = PCADJTIMEBTNFONTSZ
	ADJTIMEDOWNIMAGE = PCADJTIMEDOWNIMAGE
	ADJTIMEFONTSZ = PCADJTIMEFONTSZ
	ADJTIMEUPIMAGE = PCADJTIMEUPIMAGE
	BTNFONTSZ = PCBTNFONTSZ
	CONFIGDIRECTORY = "/home/will/.config/biditi_DEV/"
	COUNTERFONTSZ = PCCOUNTERFONTSZ
	DOWNIMAGE = PCDOWNIMAGE
	FONT = PCFONT
	LABELFONTSZ = PCLABELFONTSZ
	SETTIMERFONTSZ = PCSETTIMERFONTSZ
	SG.ChangeLookAndFeel("DarkGreen5")
	SPACEFONTSZ = PCSPACEFONTSZ
	SPINFONTSZ = PCSPINFONTSZ
	TIMERFONTSZ = PCTIMERFONTSZ
	UPDOWNTIMEFONTSZ = PCUPDOWNTIMEFONTSZ
	UPIMAGE = PCUPIMAGE
else:
	ADJTIMEBTNFONTSZ = PCADJTIMEBTNFONTSZ
	ADJTIMEDOWNIMAGE = PCADJTIMEDOWNIMAGE
	ADJTIMEFONTSZ = PCADJTIMEFONTSZ
	ADJTIMEUPIMAGE = PCADJTIMEUPIMAGE
	BTNFONTSZ = PCBTNFONTSZ
	CONFIGDIRECTORY = "/home/will/.config/biditi/"
	COUNTERFONTSZ = PCCOUNTERFONTSZ
	DOWNIMAGE = PCDOWNIMAGE
	FONT = PCFONT
	LABELFONTSZ = PCLABELFONTSZ
	SETTIMERFONTSZ = PCSETTIMERFONTSZ
	SG.ChangeLookAndFeel("DarkPurple6")
	SPACEFONTSZ = PCSPACEFONTSZ
	SPINFONTSZ = PCSPINFONTSZ
	TIMERFONTSZ = PCTIMERFONTSZ
	UPDOWNTIMEFONTSZ = PCUPDOWNTIMEFONTSZ
	UPIMAGE = PCUPIMAGE

# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# currentData dict keys and uses
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

BUTTON = "BUTTON"
DOWNSEC = "DOWNSEC"
EVENTS = "EVENTS"
FILENAME = "FILENAME"
TASK1COUNT = "TASK1COUNT"
TASK1DOWNTIMER = "TASK1DOWNTIMER"
TASK1NAME = "TASK1NAME"
TASK1UPTIMER = "TASK1UPTIMER"
TASK2COUNT = "TASK2COUNT"
TASK2DOWNTIMER = "TASK2DOWNTIMER"
TASK2NAME = "TASK2NAME"
TASK2UPTIMER = "TASK2UPTIMER"
TASK3COUNT = "TASK3COUNT"
TASK3DOWNTIMER = "TASK3DOWNTIMER"
TASK3NAME = "TASK3NAME"
TASK3UPTIMER = "TASK3UPTIMER"
TASK4COUNT = "TASK4COUNT"
TASK4DOWNTIMER = "TASK4DOWNTIMER"
TASK4NAME = "TASK4NAME"
TASK4UPTIMER = "TASK4UPTIMER"
TEXTNAME = "TEXTNAME"
UPSEC = "UPSEC"

DEFAULTS = [
	(DOWNSEC, 0,),
	(EVENTS, [],),
	(FILENAME, "biditi.pkl",),
	(TASK1COUNT, 0,),
	(TASK1DOWNTIMER, 7,),
	(TASK1NAME, Q,),
	(TASK1UPTIMER, 14,),
	(TASK2COUNT, 0,),
	(TASK2DOWNTIMER, 7,),
	(TASK2NAME, QOMO,),
	(TASK2UPTIMER, 14,),
	(TASK3COUNT, 0,),
	(TASK3DOWNTIMER, 7,),
	(TASK3NAME, FIREFLY,),
	(TASK3UPTIMER, 20,),
	(TASK4COUNT, 0,),
	(TASK4DOWNTIMER, 7,),
	(TASK4NAME, VARIOUS,),
	(TASK4UPTIMER, 14,),
	(TEXTNAME, "biditi.txt",),
	(UPSEC, 0,),
]


def defaults():
	defaultsRtn = {}
	for entry in DEFAULTS:
		defaultsRtn[entry[0]] = entry[1]
	return defaultsRtn


DEFAULTSVALUESNDX = {
	TASK1NAME: 0,
	TASK2NAME: 1,
	TASK3NAME: 2,
	TASK4NAME: 3,
}

# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# get a few things done that will be used by functions, but were unneeded by the init above
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

currentData = defaults()
directionUp = True
myFactor = MYFACTOR
myScale = MYSCALE
ticks = 0
timerRunning = False


def pickleIt(fileName, dataToPickle):
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	with open(CONFIGDIRECTORY + fileName, 'wb') as FD_OUT_:
		PD.dump(dataToPickle, FD_OUT_)
		FD_OUT_.flush()
		FD_OUT_.close()
	with open(CONFIGDIRECTORY + LASTFILENAME, "tw") as FD_OUT_:
		FD_OUT_.writelines(fileName)
		FD_OUT_.flush()
		FD_OUT_.close()


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


def unPickleIt(fileName):
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	with open(CONFIGDIRECTORY + fileName, "rb") as FD_IN_:
		dataToRTN_ = PD.load(FD_IN_)
	return dataToRTN_


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


def getData(fileName):
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	global currentData
	if PATH.exists(CONFIGDIRECTORY + fileName):
		currentData = unPickleIt(fileName)
	else:
		currentData = defaults()
		pickleIt(fileName, currentData)


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


def makeTime(secondsIn):
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	secondsIn = int(secondsIn)
	strRTN = f"{int(secondsIn // 60):02d}:{int(secondsIn % 60):02d}"
	return strRTN


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


def myInit():
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	if PATH.exists(CONFIGDIRECTORY + LASTFILENAME):
		# print(f"lastfilename {LASTFILENAME} being opened\n")
		FD_IN_ = open(CONFIGDIRECTORY + LASTFILENAME, "tr")
		filename = FD_IN_.readline()
		FD_IN_.close()
		if PATH.exists(CONFIGDIRECTORY + filename):
			getData(filename)
		else:
			pickleIt(LASTFILENAME, currentData)
	else:
		pickleIt(LASTFILENAME, currentData)
	# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


myInit()

# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# buttons defined here, don't forget to ** double unpack these when used
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

ADJBTNDOWN = {
	"button_text": "",
	"font": (FONT, ADJTIMEBTNFONTSZ),
	"image_data": ADJTIMEDOWNIMAGE,
	"focus": True,
	"button_color": (ADJBTNDOWNTEXTCOLOR, ADJBTNDOWNCOLOR),
}

ADJBTNUP = {
	"button_text": "",
	"image_data": ADJTIMEUPIMAGE,
	"font": (FONT, ADJTIMEBTNFONTSZ),
	"focus": True,
	"button_color": (ADJBTNUPTEXTCOLOR, ADJBTNUPCOLOR),
}

BTNDOWN = {
	"button_text": "",
	"image_data": DOWNIMAGE,
	"focus": True,
	"font": (FONT, BTNFONTSZ),
	"button_color": (BTNDOWNTEXTCOLOR, BTNDOWNCOLOR),
}

BTNUP = {
	"button_text": "",
	"image_data": UPIMAGE,
	"focus": True,
	"font": (FONT, BTNFONTSZ),
	"button_color": (BTNUPTEXTCOLOR, BTNUPCOLOR),
}

BTNQUIT = {
	"button_text": "QUIT",
	"focus": True,
	"font": (FONT, BTNFONTSZ),
	"button_color": (BTNQUITTEXTCOLOR, BTNQUITCOLOR),
}

BTNTASKUP = {
	"button_text": "",
	"image_data": UPIMAGE,
	"focus": True,
	"font": (FONT, BTNFONTSZ),
	"button_color": (BTNTASKUPTEXTCOLOR, BTNTASKUPCOLOR),
}

BTNTASKDOWN = {
	"button_text": "",
	"image_data": DOWNIMAGE,
	"focus": True,
	"font": (FONT, BTNFONTSZ),
	"button_color": (BTNTASKDOWNTEXTCOLOR, BTNTASKDOWNCOLOR),
}

BTNZEROALL = {
	"button_text": "ZERO",
	"focus": True,
	"font": (FONT, BTNFONTSZ),
	"button_color": (BTNZEROTEXTCOLOR, BTNZEROCOLOR),
}

# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# spin box
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#


TASKSPINBOX = {
	"values": TASKLIST,
	"background_color": SPINBKGNDCOLOR,
	"font": (FONT, SPINFONTSZ,),
	"size": SPINSIZE,
	"text_color": SPINTEXTCOLOR,
}


# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# text parameters
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
TEXTADJTIMEDOWN = {
	"size": (5, 1),
	"text_color": ADJBTNDOWNTEXTCOLOR,
	"font": (FONT, ADJTIMEFONTSZ),
	"justification": "center",
	"background_color": ADJTIMEDOWNBKGNDCOLOR,
}

TEXTADJTIMEUP = {
	"size": (5, 1),
	"text_color": ADJBTNUPTEXTCOLOR,
	"font": (FONT, ADJTIMEFONTSZ),
	"justification": "center",
	"background_color": ADJTIMEUPBKGNDCOLOR,
}

TEXTTASKCOUNT = {
	"size": TASKCOUNTSZ,
	"text_color": TASKCOUNTERCOLOR,
	"font": (FONT, COUNTERFONTSZ),
	"justification": "center",
}

TEXTTIMERDOWN = {
	"size": (5, 1),
	"text_color": TIMERDOWNTEXTCOLOR,
	"font": (FONT, SETTIMERFONTSZ),
	"justification": "center",
	"background_color": TIMERDOWNBKGNDCOLOR,
}

TEXTTIMERDOWNPARMS = {
	"text_color": TIMERDOWNTEXTCOLOR,
	"background_color": TIMERDOWNBKGNDCOLOR,
}

TEXTTIMEROFF = {
	"size": (5, 1),
	"text_color": TIMEROFFTXTCOLOR,
	"font": (FONT, SETTIMERFONTSZ),
	"justification": "center",
	"background_color": TIMEROFFBKGNDCOLOR,
}

TEXTTIMEROFFPARMS = {
	"text_color": TIMEROFFTXTCOLOR,
	"background_color": TIMEROFFBKGNDCOLOR,
}

TEXTTIMERUP = {
	"size": (5, 1),
	"font": (FONT, SETTIMERFONTSZ),
	"justification": "center",
	"text_color": TIMERUPTEXTCOLOR,
	"background_color": TIMERUPBKGNDCOLOR,
}

TEXTTIMERUPPARMS = {
	"text_color": TIMERUPTEXTCOLOR,
	"background_color": TIMERUPBKGNDCOLOR,
}

TEXTSPACE1 = {
	"size": (3, 1),
	"text_color": SPACECOLOR,
	"font": (FONT, SPACEFONTSZ),
	"justification": "center",
}

TEXTDOWNTIME = {
	"size": (5, 1),
	"font": (FONT, UPDOWNTIMEFONTSZ),
	"justification": "center",
	"text_color": TIMERDOWNTEXTCOLOR,
	"background_color": TIMERDOWNBKGNDCOLOR,
}

TEXTUPTIME = {
	"size": (5, 1),
	"font": (FONT, UPDOWNTIMEFONTSZ),
	"justification": "center",
	"text_color": TIMERUPTEXTCOLOR,
	"background_color": TIMERUPBKGNDCOLOR,
}


# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# columns, remember to ** unpack as appropriate
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#

CLMTASK1 = [
	[
		SG.Spin(
			initial_value=currentData[TASK1NAME],
			key="_task1_spin_",
			**TASKSPINBOX,
		),
	],
	[
		SG.Button(
			key="task1+",
			**BTNTASKUP,
		),
	],
	[
		SG.Text(
			key="_task1count_",
			**TEXTTASKCOUNT,
		),
	],
	[
		SG.Button(
			key="task1-",
			**BTNTASKDOWN,
		),
	],
	[
		SG.Btn(
			key="U1M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="U1S+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D1M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D1S+",
			**ADJBTNUP,
		),
	],
	[
		SG.Text(
			key="_task1UpTimer_",
			**TEXTADJTIMEUP,
		),
		SG.Text(
			key="_task1DownTimer_",
			**TEXTADJTIMEDOWN,
		),
	],
	[
		SG.Btn(
			key="U1M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="U1S-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D1M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D1S-",
			**ADJBTNDOWN,
		),
	],
]

CLMTASK2 = [
	[
		SG.Spin(
			initial_value=currentData[TASK2NAME],
			key="_task2_spin_",
			**TASKSPINBOX,
		),
	],
	[
		SG.Button(
			key="task2+",
			**BTNTASKUP,
		),
	],
	[
		SG.Text(
			key="_task2count_",
			**TEXTTASKCOUNT,
		),
	],
	[
		SG.Button(
			key="task2-",
			**BTNTASKDOWN,
		),
	],
	[
		SG.Btn(
			key="U2M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="U2S+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D2M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D2S+",
			**ADJBTNUP,
		),
	],
	[
		SG.Text(
			key="_task2UpTimer_",
			**TEXTADJTIMEUP,
		),
		SG.Text(
			key="_task2DownTimer_",
			**TEXTADJTIMEDOWN,
		),
	],
	[
		SG.Btn(
			key="U2M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="U2S-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D2M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D2S-",
			**ADJBTNDOWN,
		),
	],
]

CLMTASK3 = [
	[
		SG.Spin(
			initial_value=currentData[TASK3NAME],
			key="_task3_spin_",
			**TASKSPINBOX,
		),
	],
	[
		SG.Button(
			key="task3+",
			**BTNTASKUP,
		),
	],
	[
		SG.Text(
			key="_task3count_",
			**TEXTTASKCOUNT,
		),
	],
	[
		SG.Button(
			key="task3-",
			**BTNTASKDOWN,
		),
	],
	[
		SG.Btn(
			key="U3M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="U3S+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D3M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D3S+",
			**ADJBTNUP,
		),
	],
	[
		SG.Text(
			key="_task3UpTimer_",
			**TEXTADJTIMEUP,
		),
		SG.Text(
			key="_task3DownTimer_",
			**TEXTADJTIMEDOWN,
		),
	],
	[
		SG.Btn(
			key="U3M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="U3S-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D3M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D3S-",
			**ADJBTNDOWN,
		),
	],
]

CLMTASK4 = [
	[
		SG.Spin(
			initial_value=currentData[TASK4NAME],
			key="_task4_spin_",
			**TASKSPINBOX,
		),
	],
	[
		SG.Button(
			key="task4+",
			**BTNTASKUP,
		),
	],
	[
		SG.Text(
			key="_task4count_",
			**TEXTTASKCOUNT,
		),
	],
	[
		SG.Button(
			key="task4-",
			**BTNTASKDOWN,
		),
	],
	[
		SG.Btn(
			key="U4M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="U4S+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D4M+",
			**ADJBTNUP,
		),
		SG.Btn(
			key="D4S+",
			**ADJBTNUP,
		),
	],
	[
		SG.Text(
			key="_task4UpTimer_",
			**TEXTADJTIMEUP,
		),
		SG.Text(
			key="_task4DownTimer_",
			**TEXTADJTIMEDOWN,
		),
	],
	[
		SG.Btn(
			key="U4M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="U4S-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D4M-",
			**ADJBTNDOWN,
		),
		SG.Btn(
			key="D4S-",
			**ADJBTNDOWN,
		),
	],
]

CLMTIMER = [
	[
		SG.Text(
			"timer",
			size=(5, 1),
			text_color=TIMERUPTEXTCOLOR,
			font=(FONT, TIMERFONTSZ),
			justification="center",
			key="_timer_",
		),
	],
]

layout = [
	[
		SG.Col(CLMTIMER),
	],
	[
		SG.Text(
			key="_upTime_",
			**TEXTUPTIME,
		),
		SG.Text(
			key="_downTime_",
			**TEXTDOWNTIME,
		),
		SG.Col(
			[
				[
					SG.Btn(
						key="Quit",
						**BTNQUIT,
					),
				],
				[
					SG.Btn(
						key="zeroAll",
						**BTNZEROALL,
					),
				],
			],
		),
	],
	[
		SG.Col(CLMTASK1),
		SG.Col(CLMTASK2),
		SG.Col(CLMTASK3),
		SG.Col(CLMTASK4),
	],
]

window = SG.Window("biditi", layout, location=(0, 0), element_padding=(0, 0)).finalize()


def nowStr(dtObj=DT.now()):
	return dtObj.strftime("%Y%m%d.%H%M%S")


def updateTime(isUp):
	# update timer and cycleCount
	tempTimerVAL = ticks // myFactor
	timerSTR = makeTime(tempTimerVAL)
	window.Element("_timer_").Update(value=timerSTR)
	window.Element("_task1count_").Update(value=(f"{currentData[TASK1COUNT]:03d}"))
	window.Element("_task2count_").Update(value=(f"{currentData[TASK2COUNT]:03d}"))
	window.Element("_task3count_").Update(value=(f"{currentData[TASK3COUNT]:03d}"))
	window.Element("_task4count_").Update(value=(f"{currentData[TASK4COUNT]:03d}"))

	if isUp is True:
		window.Element("_upTime_").Update(value=(makeTime(currentData[UPSEC] - tempTimerVAL)))
		window.Element("_downTime_").Update(value=(makeTime(currentData[DOWNSEC])))
	elif isUp is False:
		window.Element("_upTime_").Update(value=(makeTime(currentData[UPSEC])))
		window.Element("_downTime_").Update(value=(makeTime(currentData[DOWNSEC] - tempTimerVAL)))
	elif isUp is None:
		window.Element("_upTime_").Update(value=(makeTime(0)))
		window.Element("_downTime_").Update(value=(makeTime(0)))

	TUpTimer = makeTime(currentData[TASK1UPTIMER])
	TDownTimer = makeTime(currentData[TASK1DOWNTIMER])
	window.Element("_task1UpTimer_").Update(value=f"{TUpTimer}")
	window.Element("_task1DownTimer_").Update(value=f"{TDownTimer}")

	TUpTimer = makeTime(currentData[TASK2UPTIMER])
	TDownTimer = makeTime(currentData[TASK2DOWNTIMER])
	window.Element("_task2UpTimer_").Update(value=f"{TUpTimer}")
	window.Element("_task2DownTimer_").Update(value=f"{TDownTimer}")

	TUpTimer = makeTime(currentData[TASK3UPTIMER])
	TDownTimer = makeTime(currentData[TASK3DOWNTIMER])
	window.Element("_task3UpTimer_").Update(value=f"{TUpTimer}")
	window.Element("_task3DownTimer_").Update(value=f"{TDownTimer}")

	TUpTimer = makeTime(currentData[TASK4UPTIMER])
	TDownTimer = makeTime(currentData[TASK4DOWNTIMER])
	window.Element("_task4UpTimer_").Update(value=f"{TUpTimer}")
	window.Element("_task4DownTimer_").Update(value=f"{TDownTimer}")


def incCount(inCount):
	TI = inCount + 1
	if TI > 999:
		TI = 999
	return TI


def decCount(inCount):
	TI = inCount - 1
	if TI < 0:
		TI = 0
	return TI


def incTime(inSeconds, increment):
	TInSeconds = inSeconds + increment
	TMin = TInSeconds // 60
	# TSec = TInSeconds % 60
	if TMin > 99:
		TInSeconds = (99 * 60) + 59
	return TInSeconds


def decTime(inSeconds, increment):
	TInSeconds = inSeconds - increment
	if TInSeconds < 0:
		TInSeconds = 0
	return TInSeconds


def updateTimerBackground(COLOR):
	# put change background code
	window.Element("_timer_").Update(background_color=COLOR)


def setTimerDown():
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	window.Element("_timer_").update(**TEXTTIMERDOWNPARMS)


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


def setTimerOff():
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	window.Element("_timer_").update(**TEXTTIMEROFFPARMS)


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


def setTimerUp():
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	window.Element("_timer_").update(**TEXTTIMERUPPARMS)


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


def zeroStuff(modeIn):
	global ticks, directionUp, currentData
	ticks = 0
	directionUp = True
	updateTime(None)
	setTimerOff()
	if modeIn == MODE_NORMAL:
		currentData = defaults()
		pickleIt(currentData[FILENAME], currentData)
	updateTime(None)


def startTimer():
	global timerRunning, currentData
	timerRunning = True
	setTimerUp()
	updateTime(True)


def stopTimer(stopMode):
	global timerRunning
	timerRunning = False
	setTimerOff()
	updateTime(None)


def getValues(inValues):
	global currentData
	for key, item in DEFAULTSVALUESNDX.items():
		currentData[key] = inValues[item]


def addEvent(event2add):
	# fold here ⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱⟱
	global currentData
	entryToAdd = [nowStr(DT.now()), event2add]
	# currentData[EVENTS].append(entryToAdd)
	pickleIt(currentData[FILENAME], currentData)
	with open(CONFIGDIRECTORY + currentData[TEXTNAME], "ta") as FDOut:
		outStr = ""
		outStr += f"""{entryToAdd}	{currentData[TASK1COUNT]}	{currentData[TASK2COUNT]}	{currentData[TASK3COUNT]}	{currentData[TASK4COUNT]}
"""
		# print(outStr)
		FDOut.writelines(outStr)
		FDOut.flush()
		FDOut.close()


# fold here ⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰⟰


getData(currentData[FILENAME])
updateTime(None)

while True:  # Event Loop
	event, values = window.Read(timeout=myScale)  # use as high of a timeout value as you can
	# 	print(f"""
	# event |{event}|
	# values |{values}|
	# """)
	oldDirectionUp = directionUp
	oldTimerRunning = timerRunning
	if event is None or event == "Quit":  # X or quit button clicked
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		addEvent(event)
		stopTimer(STOPMODE_BUTTON)
		pickleIt(currentData[FILENAME], currentData)
		break
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "zeroAll":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		zeroStuff(MODE_NORMAL)
		stopTimer(STOPMODE_BUTTON)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "task1+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1COUNT] = incCount(currentData[TASK1COUNT])
		currentData[UPSEC] = currentData[TASK1UPTIMER]
		currentData[DOWNSEC] = currentData[TASK1DOWNTIMER]
		updateTime(NOT)
		if not timerRunning:
			zeroStuff(MODE_RESTART)
			startTimer()
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "task2+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2COUNT] = incCount(currentData[TASK2COUNT])
		currentData[UPSEC] = currentData[TASK2UPTIMER]
		currentData[DOWNSEC] = currentData[TASK2DOWNTIMER]
		updateTime(NOT)
		if not timerRunning:
			zeroStuff(MODE_RESTART)
			startTimer()
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "task3+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3COUNT] = incCount(currentData[TASK3COUNT])
		currentData[UPSEC] = currentData[TASK3UPTIMER]
		currentData[DOWNSEC] = currentData[TASK3DOWNTIMER]
		updateTime(NOT)
		if not timerRunning:
			zeroStuff(MODE_RESTART)
			startTimer()
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "task4+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4COUNT] = incCount(currentData[TASK4COUNT])
		currentData[UPSEC] = currentData[TASK4UPTIMER]
		currentData[DOWNSEC] = currentData[TASK4DOWNTIMER]
		updateTime(NOT)
		if not timerRunning:
			zeroStuff(MODE_RESTART)
			startTimer()
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "task1-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1COUNT] = decCount(currentData[TASK1COUNT])
		updateTime(NOT)
		if timerRunning:
			stopTimer(STOPMODE_BUTTON)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "task2-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2COUNT] = decCount(currentData[TASK2COUNT])
		updateTime(NOT)
		if timerRunning:
			stopTimer(STOPMODE_BUTTON)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "task3-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3COUNT] = decCount(currentData[TASK3COUNT])
		updateTime(NOT)
		if timerRunning:
			stopTimer(STOPMODE_BUTTON)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "task4-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4COUNT] = decCount(currentData[TASK4COUNT])
		updateTime(NOT)
		if timerRunning:
			stopTimer(STOPMODE_BUTTON)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "U1M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1UPTIMER] = incTime(currentData[TASK1UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U1S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1UPTIMER] = incTime(currentData[TASK1UPTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D1M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1DOWNTIMER] = incTime(currentData[TASK1DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D1S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1DOWNTIMER] = incTime(currentData[TASK1DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	# getValues(values)

	elif event == "U2M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2UPTIMER] = incTime(currentData[TASK2UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U2S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2UPTIMER] = incTime(currentData[TASK2UPTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D2M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2DOWNTIMER] = incTime(currentData[TASK2DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D2S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2DOWNTIMER] = incTime(currentData[TASK2DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "U3M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3UPTIMER] = incTime(currentData[TASK3UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U3S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3UPTIMER] = incTime(currentData[TASK3UPTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D3M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3DOWNTIMER] = incTime(currentData[TASK3DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D3S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3DOWNTIMER] = incTime(currentData[TASK3DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "U4M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4UPTIMER] = incTime(currentData[TASK4UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U4S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4UPTIMER] = incTime(currentData[TASK4UPTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D4M+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4DOWNTIMER] = incTime(currentData[TASK4DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D4S+":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4DOWNTIMER] = incTime(currentData[TASK4DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "U1M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1UPTIMER] = decTime(currentData[TASK1UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U1S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1UPTIMER] = decTime(currentData[TASK1UPTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D1M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1DOWNTIMER] = decTime(currentData[TASK1DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D1S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK1DOWNTIMER] = decTime(currentData[TASK1DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "U2M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2UPTIMER] = decTime(currentData[TASK2UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U2S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2UPTIMER] = decTime(currentData[TASK2UPTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D2M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2DOWNTIMER] = decTime(currentData[TASK2DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D2S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK2DOWNTIMER] = decTime(currentData[TASK2DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "U3M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3UPTIMER] = decTime(currentData[TASK3UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U3S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3UPTIMER] = decTime(currentData[TASK3UPTIMER], 1)
		updateTime()
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D3M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3DOWNTIMER] = decTime(currentData[TASK3DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D3S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK3DOWNTIMER] = decTime(currentData[TASK3DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	elif event == "U4M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4UPTIMER] = decTime(currentData[TASK4UPTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "U4S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4UPTIMER] = decTime(currentData[TASK4UPTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D4M-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4DOWNTIMER] = decTime(currentData[TASK4DOWNTIMER], 60)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣
	elif event == "D4S-":
		# fold here ⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥⥥
		currentData[TASK4DOWNTIMER] = decTime(currentData[TASK4DOWNTIMER], 1)
		updateTime(NOT)
	# fold here ⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣⥣

	upTicks = int(currentData[UPSEC] * myFactor)
	downTicks = int(currentData[DOWNSEC] * myFactor)
	if timerRunning is True and oldTimerRunning is False:
		setTimerUp()
		oldTimerRunning = True

	if event != "__TIMEOUT__":
		# currentData[AUTOGO1] = values[DEFAULTSVALUESNDX[AUTOGO1]]
		# currentData[AUTOGO2] = values[DEFAULTSVALUESNDX[AUTOGO2]]
		# currentData[AUTOGO3] = values[DEFAULTSVALUESNDX[AUTOGO3]]
		# currentData[AUTOGO4] = values[DEFAULTSVALUESNDX[AUTOGO4]]
		# currentData[CYCLE] = values[VALDXCYCLE]  # cycle up and down until stopped checkbox
		addEvent(event)
	if timerRunning:
		if directionUp is True:
			ticks += 1
		else:
			ticks -= 1
		# print(ticks)
		updateTime(directionUp)
		if directionUp & (ticks >= upTicks):
			setTimerDown()
			directionUp = False
			ticks = downTicks
		if directionUp is False and ticks <= myFactor:
			ticks = 0
			stopTimer(STOPMODE_CYCLE)
	else:
		updateTimerBackground(TIMEROFFBKGNDCOLOR)

# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
# end of biditi.property
# #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
